class String
  def rr
    if self[-1]=="\n" then return self.chop else return self end
  end
  def pp_block
    if self[0..14]=='LANTHANUM  57.0'
      $la.pp_add(self); $la.one_more
    elsif self[0..14]=='OXYGEN      8.0'
      $o.pp_add(self); $o.one_more
    elsif self[0..14]=='HYDROGEN    1.0'
      $h.pp_add(self); $h.one_more
      #else puts self
    end
  end
end

########ATOMS########
key = (1..10).to_a
val = ('a'..'j').to_a
a_arr = [key,val]
a_hash = Hash[*a_arr.transpose.flatten]       #TODO read elements as keys, set Atom objects as values
a_hash.keys.each{|a| a_hash[a]=Exp.new}
a_hash.values.each{|a| a.set_val(777)}
a_hash.values.each{|a| a.puts_val}

########ATOM########
class Atom
  def num                                     #Number
    return @num
  end
  def def_num                                 #Number def
    @num = 0
  end
  def one_more                                #Number increase
    @num += 1
  end
  def pp_def(str)                             #PP-file def
    @pp = IO.read(str)
  end
  def pp_add(str)                             #PP puts
    puts str.rr+@pp
  end
  def ecp_def(str)                            #ECP-file def
    @ecp = IO.read(str)
  end
  def ecp_ndef(str)                           #Empty ECP def
    @ecp = " #{str.upcase} none"
  end
  def ecp_add                                 #ECP puts
    puts @ecp
  end
end
########ATOM_END########

######## TOP ########
def top_def(str)
  return Proc.new{$top = IO.open("#{str}.top")}
end

######## La ########
$la = Atom.new
$la.def_num
$la.pp_def('la.pp')
$la.ecp_def('la.ecp')
######## O ########
$o = Atom.new
$o.def_num
$o.pp_def('o.pp')
$o.ecp_ndef('o')
######## H ########
$h = Atom.new
$h.def_num
$h.pp_def('h.pp')
$h.ecp_ndef('h')




